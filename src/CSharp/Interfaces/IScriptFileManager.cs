using System.Threading;
using System.Threading.Tasks;
using StoryGenerator.Models;

namespace StoryGenerator.Interfaces
{
    /// <summary>
    /// Interface for managing script file I/O operations.
    /// Handles reading, writing, and organizing scripts in the proper directory structure.
    /// </summary>
    public interface IScriptFileManager
    {
        /// <summary>
        /// Save a raw script generated by local LLM.
        /// Saves to /scripts/raw_local/{segment}/{age}/{title_id}.md
        /// </summary>
        /// <param name="scriptVersion">The script version to save</param>
        /// <param name="baseScriptsPath">Base path to scripts directory</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Path to the saved script file</returns>
        Task<string> SaveRawScriptAsync(
            ScriptVersion scriptVersion,
            string baseScriptsPath,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Save an iterated/improved script.
        /// Saves to /scripts/iter_local/{segment}/{age}/{title_id}_{version}.md
        /// </summary>
        /// <param name="scriptVersion">The script version to save</param>
        /// <param name="baseScriptsPath">Base path to scripts directory</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Path to the saved script file</returns>
        Task<string> SaveIteratedScriptAsync(
            ScriptVersion scriptVersion,
            string baseScriptsPath,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Load a script from file.
        /// </summary>
        /// <param name="scriptPath">Path to the script file</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>The script content</returns>
        Task<string> LoadScriptAsync(
            string scriptPath,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Save a script scoring result to JSON.
        /// Saves to /scores/{segment}/{age}/{title_id}_script_{version}_score.json
        /// </summary>
        /// <param name="scoringResult">The scoring result to save</param>
        /// <param name="baseScoresPath">Base path to scores directory</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Path to the saved score file</returns>
        Task<string> SaveScriptScoreAsync(
            ScriptScoringResult scoringResult,
            string baseScoresPath,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Load a script scoring result from JSON file.
        /// </summary>
        /// <param name="scorePath">Path to the score JSON file</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>The script scoring result</returns>
        Task<ScriptScoringResult> LoadScriptScoreAsync(
            string scorePath,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Find all script files in a directory matching a pattern.
        /// </summary>
        /// <param name="directory">Directory to search</param>
        /// <param name="pattern">File pattern (e.g., "*.md")</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Collection of script file paths</returns>
        Task<System.Collections.Generic.IEnumerable<string>> FindScriptFilesAsync(
            string directory,
            string pattern = "*.md",
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Ensure directory structure exists for script storage.
        /// Creates necessary directories if they don't exist.
        /// </summary>
        /// <param name="basePath">Base path</param>
        /// <param name="segment">Audience segment</param>
        /// <param name="scriptType">Script type ("raw_local", "iter_local", etc.)</param>
        /// <returns>Path to the ensured directory</returns>
        string EnsureScriptDirectory(string basePath, AudienceSegment segment, string scriptType);

        /// <summary>
        /// Ensure directory structure exists for score storage.
        /// </summary>
        /// <param name="basePath">Base path</param>
        /// <param name="segment">Audience segment</param>
        /// <returns>Path to the ensured directory</returns>
        string EnsureScoreDirectory(string basePath, AudienceSegment segment);

        /// <summary>
        /// Generate a file name for a script.
        /// </summary>
        /// <param name="titleId">The title ID</param>
        /// <param name="version">Version identifier (optional for raw scripts)</param>
        /// <returns>Generated file name</returns>
        string GenerateScriptFileName(string titleId, string? version = null);

        /// <summary>
        /// Generate a file name for a script score.
        /// </summary>
        /// <param name="titleId">The title ID</param>
        /// <param name="version">Version identifier</param>
        /// <returns>Generated file name</returns>
        string GenerateScoreFileName(string titleId, string version);
    }
}
